---
title: "bdt_mammal_communities"
format: html
editor: visual
---

## Biodiversity Ticks Project: Small Mammal Community Analysis

This document features code to evaluate the assembly of small mammal communities from NEON data. It aims to examine how the presence and abundance of certain species differs from what would be expected from neutral processes.

### Setup

First, load libraries and data:

```{r}

## loading packages
library(tidyverse)
library(neonUtilities)
library(janitor)
library(lubridate)

## read reference data tables
## load data product ids
data_products <- read_csv("neon_data_ids.csv")
## reformat data product names
data_products$data_name <- make_clean_names(data_products$data_category)
## load sites of interest
sites <- read_csv("neon_sites.csv") %>%
  clean_names()

## load the data for each site with the map functional,
## with the filename format: "raw_data/SITE/SITE_small_mammal_box_trapping_2012-01-01_2024-12-31/mam_pertrapnight.csv"
## and the variable file format: "raw_data/SITE/SITE_small_mammal_box_trapping_2012-01-01_2024-12-31/variables_10072.csv"
mammal_trap_data <- map(.x = sites$site_code,
                        .f = function(site){
                          readTableNEON(dataFile = paste0("raw_data/", site, "/", site, "_small_mammal_box_trapping_2012-01-01_2024-12-31/mam_pertrapnight.csv"),
                                        varFile = paste0("raw_data/", site, "/", site, "_small_mammal_box_trapping_2012-01-01_2024-12-31/variables_10072.csv"))
                        })
```

Now we need to process the mammal box trapping data to organize trapping nights into trapping sessions.

```{r}

## first changing the list we loaded into a data frame, and adding some helpful columns
mammal_trap_df <- bind_rows(mammal_trap_data) %>%
  clean_names() %>%
  mutate(trap_status_code = str_sub(string = trap_status, start = 1, end = 1),
         trapping_date = as.Date(collect_date),
         year = year(trapping_date),
         yday = yday(trapping_date))

## then we will identify trapping sessions for each plot using the difference of days among trapping nights
trapping_sessions <- select(mammal_trap_df, plot_id, trapping_date) %>%
  distinct() %>%
  arrange(plot_id, trapping_date) %>%
  group_by(plot_id) %>%
  mutate(plot_date = str_c(plot_id, "_", trapping_date),
         date_diff = c(0, diff(trapping_date)),
         session = cumsum(date_diff > 10),
         plot_session = str_c(plot_id, "_", session))

## and then the session data can be joined into the main data frame
mammal_trap_df <- left_join(mammal_trap_df, trapping_sessions, by = c("plot_id", "trapping_date"))
```

### Taxon Abundance by Plot and Session

Now we can calculate the abundance of each taxon in each trapping session. We want a long format data frame with a row for each combination of plot, session, and taxon.

```{r}
## first let's change taxon_id and plot_session to factors
mammal_trap_df <- mammal_trap_df %>%
  mutate(taxon_id = as.factor(taxon_id),
         plot_session = as.factor(plot_session))

## now we can create a df with columns for session and taxon, with every possible combo
taxon_by_session <- tibble(plot_session = rep(levels(mammal_trap_df$plot_session), 
                                              each = length(levels(mammal_trap_df$taxon_id))),
                           taxon_id = rep(levels(mammal_trap_df$taxon_id), 
                                          length(levels(mammal_trap_df$plot_session)))
                          )
```

Then we can start calculating the abundance of each taxon in each session.

```{r}
## first we make a data frame of only captures that have tag_id values
tagged_captures <- mammal_trap_df %>%
  filter(!is.na(tag_id))

## then find only the unique tag_id values by session
unique_captures <- tagged_captures %>%
  distinct(tag_id, plot_session, taxon_id) %>%
  arrange(plot_session, taxon_id)

## now summarize the minimum number alive (number of unique captures) for each taxon in each session
mna_summary <- unique_captures %>%
  group_by(plot_session, taxon_id) %>%
  summarize(mna = n())

## this can be joined into the taxon by session df
mna_by_session <- left_join(taxon_by_session, mna_summary, 
                            by = c("plot_session", "taxon_id")) %>%
  mutate(mna = replace_na(mna, 0)) %>%
  group_by(plot_session) %>%
  mutate(total_mna = sum(mna),
         richness = sum(mna > 0),
         prop_mna = if_else(total_mna > 0, mna / total_mna, 0)) %>%
  separate_wider_delim(cols = plot_session, names = c("site_id", "plot_num", "session"), 
                       delim = "_", cols_remove = FALSE) %>%
  mutate(session = as.numeric(session),
         plot_id = as.factor(str_c(site_id, "_", plot_num)))

```

### Bootstrapping Communities

Now we can use bootstrapping to generate null communities for each session. First, we will randomly sample species from the pool of species observed at each site and land cover class combination.

First, some data processing to fill out our session information with year of session and land cover class of plot.

```{r}
## first we need to get the land cover class for each plot
plot_land_cover <- mammal_trap_df %>%
  select(plot_id, nlcd_class) %>%
  distinct()

## then we can join this into the session data
mna_by_session <- left_join(mna_by_session, plot_land_cover, by = "plot_id")

## and we can add the year of each session
session_years <- mammal_trap_df %>%
  select(plot_session, year) %>%
  distinct()

## and join them in as well
mna_by_session <- left_join(mna_by_session, session_years, by = "plot_session")
```

#### Bootstrapping Presence/Absence

Now let's create lists of species observed at each site and land cover class combination.

```{r}

## first let's summarize the total mna by taxon_id at each site and land cover class combo
## to identify potentially rare species
site_nlcd_summary <- mna_by_session %>%
  ungroup() %>%
  filter(mna > 0) %>%
  select(site_id, nlcd_class, taxon_id, mna) %>%
  group_by(site_id, nlcd_class, taxon_id) %>%
  summarize(total_mna = sum(mna)) %>%
  ungroup()

## let's also check the full scientific name for each taxon_id
taxon_names <- mammal_trap_df %>%
  select(taxon_id, scientific_name) %>%
  distinct()

## now filter for only the taxon_id values that don't have "sp." in their scientific name
## and remove "PELEPEMA" as it is imprecise
species_names <- taxon_names %>%
  filter(!str_detect(scientific_name, "sp."), taxon_id != "PELEPEMA")

## now let's limit our site_nlcd data to only the precise species ids
## by filtering to only taxon_id values in species_names
site_nlcd_summary <- site_nlcd_summary %>%
  filter(taxon_id %in% species_names$taxon_id)

```

Now let's modify our session information to include only the taxons with precise ids like above.

```{r}
## filter the mna_by_session data to only include the precise species
## and also create a "presence" column indicating whether the mna > 0 for that species
species_by_session <- mna_by_session %>%
  filter(taxon_id %in% species_names$taxon_id) %>%
  mutate(presence = as.numeric(mna > 0),
         precise_richness = sum(presence)) %>%
  select(site_id, plot_id, nlcd_class, plot_session, session, taxon_id, presence, precise_richness)

## create a data frame of just the precise_richness values by session
precise_richness_by_session <- species_by_session %>%
  select(site_id, plot_id, nlcd_class, plot_session, session, precise_richness) %>%
  distinct() %>%
  ungroup

```

Now we can bootstrap communities for each session by randomly sampling species from the pool of species observed at each site and land cover class combination, using the observed precise_richness values as the number of species to sample.

```{r}

## create a reference data frame of plots, sites, and nlcd classes for the function to pull from
plot_info <- species_by_session %>%
  ungroup() %>%
  select(site_id, plot_id, nlcd_class) %>%
  distinct()

## create a function to randomly sample n species from the pool of species
## observed at a site and land cover class combination
sample_species <- function(plot, reps = 1000){
  ## grab site id and nlcd class for the plot
  site <- str_sub(string = plot, start = 1, end = 4) ## first four characters of plot_id
  nlcd <- plot_info %>%
    filter(plot_id == plot) %>%
    pull(nlcd_class) 
  
  ## get the species pool for the site and nlcd class
  species_pool <- site_nlcd_summary %>%
    filter(site_id == site, nlcd_class == nlcd) %>%
    pull(taxon_id)
  
  ## get the observed richnesses for the plot's sessions
  session_richness <- precise_richness_by_session %>%
    ungroup() %>%
    filter(plot_id == plot, precise_richness > 0) %>%
    select(session, precise_richness) %>%
    arrange(session, precise_richness)
  
  ## create a data frame of the species samples
  sample_comms <- expand_grid(session_richness, rep = 1:reps) %>%
    mutate(species_sample = map(precise_richness, ~sample(species_pool, size = .x, replace = FALSE))) 

  ## create a data frame of the species samples with presence information
  out <- expand_grid(session_richness, species = species_pool) %>%
    uncount(weights = reps) %>%
    mutate(rep = rep(1:reps, times = nrow(session_richness) * length(species_pool))) %>%
    arrange(rep, session, species) %>%
    left_join(sample_comms, by = c("rep", "session", "precise_richness")) %>%
    group_by(rep, session) %>%
    mutate(presence = as.numeric(species %in% unlist(species_sample)),
           plot_id = plot)

  return(out)
}

```


Now run the function on all plots to generate simulated communities.

```{r}

## simulate communities for all plots
simulated_comms <- map(plot_info$plot_id, sample_species, reps = 1000, .progress = TRUE)

## and bind the list of data frames into one data frame
simulated_comms_df <- bind_rows(simulated_comms)

rm(simulated_comms)

```

#### Testing Species Presence

Now we can look at how the presence of certain species differs from what would be expected from neutral processes. First, we can do a basic test of overall presence by plot.

```{r}

## calculate effect size and p_values for all species and plots

## first generate deviations of each species for each sim rep and observed data 
sim_presence_deviations <- simulated_comms_df %>%
  group_by(plot_id, species, rep) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>% ## calculate simulated means
  rename(taxon_id = species) %>%
  left_join(species_by_session %>% ## join in observed data
              group_by(plot_id, taxon_id) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id")) %>% 
  group_by(plot_id, taxon_id) %>%
  mutate(sim_mean = mean(rep_mean), ## calculate mean of simulated means, and then deviations
         sim_deviations = abs(rep_mean - sim_mean),
         obs_deviation = abs(obs_mean - sim_mean),
         sim_eff = rep_mean - sim_mean,
         sim_upper = quantile(sim_eff, probs = 0.975),
         sim_lower = quantile(sim_eff, probs = 0.025),
         effect_size = obs_mean - sim_mean,
         eff_comp = case_when(effect_size > sim_upper ~ "high", effect_size < sim_lower ~ "low",
                              .default = "normal")) %>%
  ungroup()

## subset a data frame of observed presence vs simulated presence by plot
presence_effects <- sim_presence_deviations %>%
  distinct(plot_id, taxon_id, sim_mean, obs_mean, effect_size, sim_upper, sim_lower, eff_comp) %>%
  rename(sim_mean_pres = sim_mean,
         obs_mean_pres = obs_mean,
         obs_pres_effect = effect_size,
         sim_upper_pres = sim_upper,
         sim_lower_pres = sim_lower,
         obs_pres_eff_comp = eff_comp)

## now perform comparison testing
sim_presence_comp <- sim_presence_deviations %>%
  group_by(plot_id, taxon_id, effect_size) %>%
  summarize(extreme_count = sum(sim_deviations >= obs_deviation), ## calculate p values
            p_value = extreme_count / n(),
            .groups = "drop") %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4))

## note that these p values don't correspond to the confidence intervals of the sim deviations because they are asymmetric

## now we can make a plot of some of the findings

## first arrange a subset of species
sp_pres_comp_gg <- sim_presence_comp %>%
  filter(taxon_id %in% c("PELE","PEMA","TAST", "MYGA", "NAIN")) %>%
  arrange(taxon_id, effect_size) %>%
  group_by(site_id, taxon_id) %>%
  mutate(rank = row_number(),
         significant = p_value < 0.05)

## now prep the null distribution
sim_pres_gg <- sim_presence_deviations %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4)) %>%
  filter(taxon_id %in% c("PELE","PEMA","TAST", "MYGA", "NAIN")) %>%
  left_join(sp_pres_comp_gg %>% select(site_id, plot_id, taxon_id, rank), 
            by = c("site_id", "plot_id", "taxon_id")) %>%
  group_by(site_id, plot_id, taxon_id, rank) %>%
  summarize(sim_eff_mean = mean(sim_eff),
            lower = quantile(sim_eff, probs = 0.025),
            upper = quantile(sim_eff, probs = 0.975),
            .groups = "drop")


## now create a plot
ggplot(data = sp_pres_comp_gg, aes(x = rank, color = taxon_id)) +
  geom_point(aes(y = effect_size)) +
  geom_errorbar(data = sim_pres_gg, aes(ymin = lower, ymax = upper, color = taxon_id),
                alpha = 0.5, width = 1) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_grid(rows = vars(taxon_id), cols = vars(site_id)) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Deviation from Expected Proportion of \nTrapping Sessions Species is Present",
       color = "Species") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

```

Next, we can look at how the presence of species differs by richness.

```{r}

pres_by_richness_deviations <- simulated_comms_df %>%
  group_by(plot_id, species, rep, precise_richness) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id, precise_richness) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id", "precise_richness")) %>%
  group_by(plot_id, taxon_id, precise_richness) %>%
  mutate(sim_mean = mean(rep_mean),
         sim_mean_eff = rep_mean - sim_mean,
         obs_mean_eff = obs_mean - sim_mean) %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4))

pres_by_rich_pele <- pres_by_richness_deviations %>%
  filter(taxon_id %in% c("PELE")) %>%
  group_by(plot_id, taxon_id, precise_richness, obs_mean_eff, site_id) %>%
  summarize(lower = quantile(sim_mean_eff, probs = 0.025),
            upper = quantile(sim_mean_eff, probs = 0.975),
            .groups = "drop")

ggplot(data = pres_by_rich_pele, aes(x = precise_richness, color = site_id)) +
  geom_point(aes(y = obs_mean_eff)) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = site_id),
                alpha = 0.5, width = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_x_continuous(name = "Species Richness",
                     breaks = 1:max(pres_by_rich_pele$precise_richness)) +
  scale_color_brewer(palette = "Set1") +
  labs(y = "Deviation from Expected Proportion of \nTrapping Sessions Species is Present",
       color = "Site") +
  facet_wrap(vars(plot_id)) +
  theme_bw() +
  theme(legend.position = "bottom")



```
Combining the above blocks into a single data wrangling sequence for average deviation and covariance w/ richness. (not really, this is raw covariance, not deviation covariance)

```{r}

## first generate deviations of each species for each sim rep and observed data 
sim_presence_deviations <- simulated_comms_df %>%
  group_by(plot_id, species, rep) %>%
  summarize(rep_mean = mean(presence),
            rep_cov = cov(presence, precise_richness),
            .groups = "drop") %>% ## calculate simulated means and covariances with richness
  rename(taxon_id = species) %>%
  left_join(species_by_session %>% ## join in observed data
              group_by(plot_id, taxon_id) %>%
              summarize(obs_mean = mean(presence),
                        obs_cov = cov(presence, precise_richness),
                        .groups = "drop")
            , by = c("plot_id", "taxon_id")) %>% 
  group_by(plot_id, taxon_id) %>%
  mutate(sim_mean = mean(rep_mean), ## calculate mean of simulated means/covs, then deviations
         sim_cov = mean(rep_cov),
         sim_mean_eff = rep_mean - sim_mean,
         obs_mean_eff = obs_mean - sim_mean,
         sim_cov_eff = rep_cov - sim_cov,
         obs_cov_eff = obs_cov - sim_cov) %>%
  ungroup()

species_by_plot_gg <- sim_presence_deviations %>%
  filter(taxon_id %in% c("PELE","PEMA","TAST", "MYGA", "NAIN")) %>%
  group_by(plot_id, taxon_id, obs_mean_eff, obs_cov_eff) %>%
  summarize(lower_mean = quantile(sim_mean_eff, probs = 0.025),
            upper_mean = quantile(sim_mean_eff, probs = 0.975),
            lower_cov = quantile(sim_cov_eff, probs = 0.025, na.rm = TRUE),
            upper_cov = quantile(sim_cov_eff, probs = 0.975, na.rm = TRUE),
            .groups = "drop") %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4))  %>%
  arrange(taxon_id, obs_mean_eff) %>%
  group_by(site_id, taxon_id) %>%
  mutate(rank = row_number())

ggplot(data = species_by_plot_gg, aes(x = rank, color = taxon_id)) +
  geom_point(aes(y = obs_mean_eff)) +
  geom_errorbar(aes(ymin = lower_mean, ymax = upper_mean, color = taxon_id),
                alpha = 0.5, width = 1) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_grid(rows = vars(taxon_id), cols = vars(site_id)) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Deviation from Expected Proportion of \nTrapping Sessions Species is Present",
       color = "Species") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

ggplot(data = species_by_plot_gg, aes(x = rank, color = taxon_id)) +
  geom_point(aes(y = obs_cov_eff)) +
  geom_errorbar(aes(ymin = lower_cov, ymax = upper_cov, color = taxon_id),
                alpha = 0.5, width = 1) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_grid(rows = vars(taxon_id), cols = vars(site_id)) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Deviation from Expected Covariance of \nSpecies Presence with Species Richness",
       color = "Species") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())


```

This is covariance between presence deviation and richness...

```{r}
pres_rich_cov_pele <- pres_by_richness_deviations %>%
  filter(taxon_id %in% c("PELE")) %>%
  group_by(plot_id, taxon_id, rep, site_id) %>%
  summarize(sim_eff_cov = cov(sim_mean_eff, precise_richness),
            obs_eff_cov = cov(obs_mean_eff, precise_richness),
            .groups = "drop") %>%
  group_by(site_id, plot_id, taxon_id, obs_eff_cov) %>%
  summarize(lower = quantile(sim_eff_cov, probs = 0.025, na.rm = TRUE),
            upper = quantile(sim_eff_cov, probs = 0.975, na.rm = TRUE),
            .groups = "drop") %>%
  arrange(taxon_id, obs_eff_cov) %>%
  group_by(site_id) %>%
  mutate(rank = row_number())

ggplot(data = pres_rich_cov_pele, aes(x = rank, color = site_id)) +
  geom_point(aes(y = obs_eff_cov)) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = site_id),
                alpha = 0.5, width = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_grid(cols = vars(site_id)) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Covariance of Deviations from \nExpected Species Presence with Species Richness",
       color = "Site") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())


```

#### Bootstrapping Abundance/Community Composition

Now we want to simulate community compositions given the species that were observed such that communities are evenly composed of each observed species. Then we can compare observed composition to see how certain species are over- or under-represented.

First we should limit our species of interest to only those that are fully processed, and thus have true abundance estimates.

```{r}

## check tagged captures for species associated with ear tag id or pit tag id formats
processed_tags <- tagged_captures %>%
  mutate(tag_suffix = str_sub(string = tag_id, start = str_locate_all(tag_id, "\\.")[[1]][3] + 1)) %>%
  filter(str_starts(tag_suffix, "O") == FALSE,
         str_starts(tag_suffix, "0") == FALSE,
         str_starts(tag_suffix, as.character(year)) == FALSE)

## check out processed tags by species
processed_summary <- processed_tags %>%
  group_by(taxon_id) %>%
  summarize(count = n(), .groups = "drop") %>%
  arrange(count)

process_check <- processed_tags %>%
  filter(taxon_id %in% c("SYCO"))

## create a string vector of fully-processed species codes based on summary and my own knowledge
processed_species <- c("PELE", "PEMA", "MYGA", "MIPE", "MIPI", "NAIN", "ZAHU", "TAST", "TAHU", "TAMI", "SYCO")

```

We also want to make a mna by session df that includes mna and precise richness. Also, we want to create a "processed richness" value that is the number of processed species observed.

```{r}

## creating mna_by_session df with only precise species ids, 
## as well as identifying processed animals/richness
mna_by_session_precise <- mna_by_session %>%
  filter(taxon_id %in% species_names$taxon_id) %>%
  mutate(presence = as.numeric(mna > 0),
         precise_richness = sum(presence),
         processed = as.numeric(taxon_id %in% processed_species),
         proc_presence = as.numeric(processed == 1 & presence == 1),
         proc_richness = sum(proc_presence))

## now make a new df with only sessions where processed animals were caught
proc_sessions <- mna_by_session_precise %>%
  filter(proc_richness > 0,
         taxon_id %in% processed_species) %>%
  group_by(plot_session) %>%
  mutate(proc_total_mna = sum(mna)) %>%
  ungroup()

```

Now we need to make a function that goes through each session in proc_sessions and generates null communities composed of the processed species in roughly even proportions.

```{r}
## test in pieces
session_id <- "TREE_028_10"
species_observed <- proc_sessions %>%
  filter(plot_session == session_id,
         presence == 1) %>%
  pull(taxon_id)

proc_mna <- proc_sessions %>%
  filter(plot_session == session_id) %>%
  pull(proc_total_mna) %>%
  unique()

reps <- 5

sim_comms <- tibble(rep = rep(1:reps, each = proc_mna),
                    species = as.vector(replicate(reps,
                                        sample(species_observed, size = proc_mna, replace = TRUE)))) %>%
  group_by(rep, species) %>%
  summarize(sim_mna = n(), .groups = "drop")
```

```{r}

## create function to randomly sample individuals from processed species observed
## until the total number of individuals sampled is equal to 
## the total number of processed individuals observed


## put it all together
sample_community <- function(session_id, reps = 1000){
  ## get the processed species observed in the session
  species_observed <- proc_sessions %>%
    filter(plot_session == session_id,
           presence == 1) %>%
    pull(taxon_id)
  
  ## get total number of processed individuals observed in the session
  proc_mna <- proc_sessions %>%
    filter(plot_session == session_id) %>%
    pull(proc_total_mna) %>%
    unique()
  
  ## simulate community compositions for given session
  sim_comms <- tibble(rep = rep(1:reps, each = proc_mna),
                      taxon_id = replicate(reps,
                                           sample(species_observed, 
                                                  size = proc_mna, replace = TRUE)) %>%
                        as.vector()) %>%
    group_by(rep, taxon_id) %>%
    summarize(sim_mna = n(), .groups = "drop") %>%
    mutate(session_id = session_id, proc_mna = proc_mna)

  
  return(sim_comms)
}

## test on a single session
sample_community(session_id = "TREE_028_10", reps = 5)

```

Now let's try the function on all sessions...

```{r}

## simulate communities for all sessions with processed species
sim_comps <- map(unique(proc_sessions$plot_session), 
                 sample_community, reps = 1000, .progress = TRUE)

## and bind the list of data frames into one data frame
sim_comps_df <- bind_rows(sim_comps)

rm(sim_comps)

```

#### Testing Abundance/Community Composition

Now let's try comparing observed community composition to simulated communities.

```{r}

## create smaller proc_session data
proc_session_data <- proc_sessions %>%
  select(plot_session, plot_id, site_id, nlcd_class, year, taxon_id, mna,
         precise_richness, proc_richness, proc_total_mna) %>%
  distinct() %>%
  rename(session_id = plot_session,
         obs_mna = mna)

## first merge the processed session data with simulated communities
sim_comms_data <- left_join(sim_comps_df, proc_session_data, by = c("session_id", "taxon_id")) %>%
  mutate(sim_prop = sim_mna / proc_total_mna,
         obs_prop = obs_mna / proc_total_mna)

## now make an effects dataframe
sim_comms_effects <- sim_comms_data %>%
  group_by(session_id, site_id, taxon_id, precise_richness, proc_richness, proc_total_mna) %>%
  mutate(sim_mean_prop = mean(sim_prop),
         sim_prop_eff = sim_prop - sim_mean_prop,
         obs_prop_eff = obs_prop - sim_mean_prop) %>%
  group_by(session_id, site_id, taxon_id, precise_richness, proc_richness, proc_total_mna,
           sim_mean_prop, obs_prop, obs_prop_eff) %>%
  summarize(sim_prop_eff_lower = quantile(sim_prop_eff, probs = 0.025),
            sim_prop_eff_upper = quantile(sim_prop_eff, probs = 0.975),
            .groups = "drop") %>%
  mutate(obs_prop_eff_comp = case_when(obs_prop_eff > sim_prop_eff_upper ~ "high",
                                      obs_prop_eff < sim_prop_eff_lower ~ "low",
                                      .default = "normal"))


```

This is PELE testing

```{r}
## filter for only PELE, compare to sims
pele_comms <- sim_comms_data %>%
  filter(taxon_id == "PELE") %>%
  group_by(session_id, site_id, precise_richness, proc_richness, proc_total_mna) %>%
  summarize(sim_mean = mean(sim_prop),
            upper = quantile(sim_prop, probs = 0.975),
            lower = quantile(sim_prop, probs = 0.025),
            obs_prop = mean(obs_prop),
            .groups = "drop") %>%
  distinct() %>%
  group_by(site_id) %>%
  arrange(obs_prop) %>%
  mutate(rank = row_number()) %>%
  arrange(site_id, rank)

## plotting
ggplot(data = pele_comms, aes(x = rank, color = site_id)) +
  geom_point(aes(y = obs_prop)) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = site_id),
                alpha = 0.5, width = 0.5) +
  facet_wrap(~site_id) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Proportion of Individuals in Community",
       color = "Site") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

## compare pele overrepresentation by richness
pele_comms <- pele_comms %>%
  mutate(over = obs_prop > upper) 

ggplot(pele_comms, aes(x = over, y = proc_richness, color = site_id)) +
  geom_jitter(height = 0.1, width = 0.3, alpha = 0.5) +
  geom_boxplot(fill = NA) +
  facet_wrap(~site_id) +
  labs(x = "PELE Overrepresented",
       y = "Species Richness") +
  theme_bw()

## check relationship between richness and mna
proc_rich_mna <- proc_session_data %>%
  distinct(session_id, site_id, proc_richness, proc_total_mna)

ggplot(proc_rich_mna, aes(x = proc_richness, y = proc_total_mna, color = site_id)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~site_id) +
  labs(x = "Processed Species Richness",
       y = "Total Processed Individuals") +
  theme_bw()

## compare pele overrepresentation by total_mna

ggplot(pele_comms, aes(x = over, y = proc_total_mna, color = site_id)) +
  geom_jitter(height = 0.1, width = 0.3, alpha = 0.5) +
  geom_boxplot(fill = NA) +
  facet_wrap(~site_id) +
  labs(x = "PELE Overrepresented",
       y = "Community Abundance") +
  theme_bw()


## calculate proprtions of communities with PELE overrepresented
pele_over_props <- pele_comms %>%
  mutate(over = obs_prop > upper) %>%
  group_by(site_id) %>%
  summarize(over_count = sum(over),
            total = n(),
            prop_over = over_count / total)

## check when PELE is overrepresented
pele_over <- pele_comms %>%
  filter(obs_prop > upper) %>%
  group_by(site_id) %>%
  arrange(obs_prop) %>%
  mutate(rank = row_number()) %>%
  arrange(site_id, rank)

ggplot(data = pele_over, aes(x = rank, color = site_id)) +
  geom_point(aes(y = obs_prop)) +
  geom_errorbar(aes(ymin = lower, ymax = upper, color = site_id),
                alpha = 0.5, width = 0.5) +
  facet_wrap(~site_id) +
  scale_x_continuous(name = "Plot",
                   sec.axis = sec_axis(~ . , name = "Site", 
                                         breaks = NULL, labels = NULL)) +
  labs(y = "Proportion of Individuals in Community",
       color = "Site") +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())




```

### Writing Data

Now we want to create a csv identifying plot level presence data for each species, and session level proportion data for each processed species. We can combine the presence effects and sim comms effects data frames to do this.

```{r}

## we can use species_by_session as the base to join to
community_effects <- species_by_session %>%
  select(-precise_richness) %>%
  left_join(presence_effects, by = c("plot_id", "taxon_id")) %>%
  left_join(sim_comms_effects, by = c("plot_session" = "session_id", "taxon_id"))
  
## write to csv
write_csv(community_effects, "processed_data/mammal_community_effects.csv")

## consider NAs for future...

```

### Old/Misc. Code

Next block is function testing...

```{r}

## test out function

test_out <- sample_species(plot = "TREE_028", reps = 100)


## summarize species presence counts by rep, compare to observed species counts
counts_by_rep <- test_out %>%
  group_by(plot_id, species, rep) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id")) %>%
  group_by(plot_id, taxon_id) %>%
  mutate(sim_mean = mean(rep_mean),
         sim_deviations = abs(rep_mean - sim_mean),
         obs_deviation = abs(obs_mean - sim_mean),
         effect_size = obs_mean - sim_mean) %>%
  group_by(plot_id, taxon_id, effect_size) %>%
  summarize(extreme_count = sum(sim_deviations >= obs_deviation),
            p_value = extreme_count / n(),
            .groups = "drop")

pres_by_rich <- test_out %>%
  group_by(plot_id, species, rep, precise_richness) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id, precise_richness) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id", "precise_richness")) %>%
  group_by(plot_id, taxon_id, precise_richness) %>%
  mutate(sim_mean = mean(rep_mean),
         sim_deviations = abs(rep_mean - sim_mean),
         obs_deviation = abs(obs_mean - sim_mean),
         effect_size = obs_mean - sim_mean) %>%
  group_by(plot_id, taxon_id, precise_richness, effect_size) %>%
  summarize(extreme_count = sum(sim_deviations >= obs_deviation),
            p_value = extreme_count / n(),
            .groups = "drop")

rich_cdf <- test_out %>%
  group_by(plot_id, species, rep, precise_richness) %>%
  summarize(rep_count = sum(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id, precise_richness) %>%
              summarize(obs_count = sum(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id", "precise_richness")) %>%
  group_by(plot_id, taxon_id, rep) %>%
  mutate(sim_cum_count = cumsum(rep_count),
         sim_sum_count = sum(rep_count),
         sim_cum_prop = sim_cum_count / sim_sum_count,
         obs_cum_count = cumsum(obs_count),
         obs_sum_count = sum(obs_count),
         obs_cum_prop = obs_cum_count / obs_sum_count,
         cum_prop_diff = obs_cum_prop - sim_cum_prop,
         sum_diff = sum(cum_prop_diff)) %>%
  group_by(plot_id, taxon_id, precise_richness) %>%
  mutate(sim_mean_prop = mean(sim_cum_prop),
         sim_deviation = abs(sim_cum_prop - sim_mean_prop),
         obs_deviation = abs(obs_cum_prop - sim_mean_prop),
         effect_size = obs_cum_prop - sim_mean_prop) 

ggplot(data = rich_cdf %>% filter(rep == 1), aes(x = factor(precise_richness), color = taxon_id)) +
  geom_jitter(aes(y = sim_mean_prop), alpha = 0.3, width = 0.2, height = 0) +
  geom_jitter(aes(y = obs_cum_prop), alpha = 1, width = 0, height = 0) +
  facet_wrap(~taxon_id) +
  theme_bw()

rich_cdf_summary <- rich_cdf %>%
  group_by(plot_id, taxon_id, rep) %>%
  summarize(sum_sim_dev = sum(sim_deviation),
            sum_obs_dev = sum(obs_deviation),
            effect_size = sum(effect_size),
            .groups = "drop")

rich_cdf_p <- rich_cdf_summary %>%
  group_by(plot_id, taxon_id, effect_size) %>%
  summarize(extreme_count = sum(sum_sim_dev >= sum_obs_dev),
            p_value = extreme_count / n(),
            .groups = "drop")
  

test_summary <- test_out %>%
  group_by(rep, species, plot_id) %>%
  summarize(presence = mean(presence)) %>%
  ungroup() %>%
  mutate(type = "simulated") %>%
  rename(taxon_id = species)

test_summary_obs <- species_by_session %>%
  ungroup() %>%
  filter(plot_id == "TREE_028", taxon_id %in% levels(as.factor(test_summary$taxon_id))) %>%
  group_by(taxon_id) %>%
  summarize(presence = mean(presence)) %>%
  ungroup() %>%
  mutate(type = "observed", rep = NA) %>%
  bind_rows(test_summary)

conf_ints <- test_summary %>%
  group_by(plot_id, taxon_id) %>%
  summarize(sim_mean = mean(presence),
            lower = quantile(presence, probs = 0.025),
            upper = quantile(presence, probs = 0.975)) %>%
  ungroup()

ggplot(data = test_summary_obs, aes(x = taxon_id, color = taxon_id)) +
  geom_jitter(width = 0.2, height = 0, aes(y = presence, 
                                    alpha = type, size = type)) +
  geom_errorbar(data = conf_ints, aes(ymin = lower, ymax = upper), width = 0.5, linewidth = 1) +
  scale_alpha_manual(values = c(1, 0.2)) +
  scale_size_manual(values = c(3, 1)) +
  coord_cartesian(ylim = c(0, 1)) +
  labs(title = "Observed vs. Simulated Species Presence",
       x = "Taxon ID",
       y = "Presence") +
  theme_bw()

## now try for all plots with map
simulated_comms <- map(plot_info$plot_id, sample_species, reps = 1000, .progress = TRUE)

## and bind the list of data frames into one data frame
simulated_comms_df <- bind_rows(simulated_comms)

## calculate effect size and p_values for all species and plots
species_presence_comp <- simulated_comms_df %>%
  group_by(plot_id, species, rep) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id")) %>%
  group_by(plot_id, taxon_id) %>%
  mutate(sim_mean = mean(rep_mean),
         sim_deviations = abs(rep_mean - sim_mean),
         obs_deviation = abs(obs_mean - sim_mean),
         effect_size = obs_mean - sim_mean) %>%
  group_by(plot_id, taxon_id, effect_size) %>%
  summarize(extreme_count = sum(sim_deviations >= obs_deviation),
            p_value = extreme_count / n(),
            .groups = "drop") %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4))

taxon_freq <- species_presence_comp %>%
  group_by(taxon_id) %>%
  summarize(count = n(), .groups = "drop") %>%
  arrange(count) %>%
  filter(count > 30)

sp_pres_comp_gg <- species_presence_comp %>%
  filter(taxon_id %in% c("PELE","PEMA","TAST")) %>%
  arrange(taxon_id, effect_size) %>%
  group_by(taxon_id) %>%
  mutate(rank = row_number(),
         significant = p_value < 0.05)

ggplot(data = sp_pres_comp_gg, aes(x = rank, y = effect_size, color = site_id)) +
  geom_point(aes(alpha = significant, size = significant)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_alpha_manual(values = c(0.3, 1)) +
  scale_size_manual(values = c(1, 2)) +
  facet_grid(rows = vars(taxon_id), cols = vars(site_id)) +
  theme_bw()

##presence by richness
pres_by_richness_comp <- simulated_comms_df %>%
  group_by(plot_id, species, rep, precise_richness) %>%
  summarize(rep_mean = mean(presence), .groups = "drop") %>%
  rename(taxon_id = species) %>%
  left_join(species_by_session %>%
              group_by(plot_id, taxon_id, precise_richness) %>%
              summarize(obs_mean = mean(presence), .groups = "drop")
            , by = c("plot_id", "taxon_id", "precise_richness")) %>%
  group_by(plot_id, taxon_id, precise_richness) %>%
  mutate(sim_mean = mean(rep_mean),
         sim_deviations = abs(rep_mean - sim_mean),
         obs_deviation = abs(obs_mean - sim_mean),
         effect_size = obs_mean - sim_mean) %>%
  group_by(plot_id, taxon_id, precise_richness, effect_size) %>%
  summarize(extreme_count = sum(sim_deviations >= obs_deviation),
            p_value = extreme_count / n(),
            .groups = "drop") %>%
  mutate(site_id = str_sub(string = plot_id, start = 1, end = 4))

pres_by_rich_gg <- pres_by_richness_comp %>%
  filter(taxon_id %in% c("PELE","PEMA","TAST")) %>%
  mutate(significant = p_value < 0.05)

ggplot(data = pres_by_rich_gg, aes(x = factor(precise_richness), y = effect_size, color = site_id)) +
  geom_jitter(aes(alpha = significant, size = significant), width = 0.2, height = 0) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_alpha_manual(values = c(0.3, 1)) +
  scale_size_manual(values = c(1, 2)) +
  facet_grid(rows = vars(taxon_id), cols = vars(site_id)) +
  theme_bw()

## now summarize
simulated_comms_summary <- simulated_comms_df %>%
  group_by(rep, plot_id, species) %>%
  summarize(sim_presence = mean(presence)) %>%
  ungroup() %>%
  rename(taxon_id = species)

observed_comms_summary <- species_by_session %>%
  ungroup() %>%
  group_by(plot_id, taxon_id) %>%
  summarize(obs_presence = mean(presence)) %>%
  ungroup()

comms_summary <- left_join(simulated_comms_summary, observed_comms_summary, 
                           by = c("plot_id", "taxon_id")) %>%
  mutate(site = str_sub(string = plot_id, start = 1, end = 4))

ggplot(data = filter(comms_summary, taxon_id == "PELE"), aes(x = taxon_id)) +
  geom_boxplot(aes(y = sim_presence), alpha = 0.1, color = "grey") +
  geom_point(aes(y = obs_presence), size = 3, color = "blue") +
  facet_wrap(~plot_id) +
  theme_bw()

## future steps: 
## confidence intervals for simulated species presence by plot_id
## compare observed and simulated species presence by plot_id



```